#pragma once
#include <vector>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class NodeInt {
public:
    std::vector<NodeInt*> child;
    std::vector<int> keys;
    bool is_leaf;

    NodeInt(bool leaf);
    ~NodeInt();
    

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TreeInt {
private:
    NodeInt* root;
    NodeInt* insert(NodeInt* node, int key, int &promotedKey, NodeInt* &NewChild);
    void print(NodeInt* node, const std::string& prefix, bool isLast);

public:
    TreeInt();
    ~TreeInt();

    void insert(int key);
    void print();

};

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////